package evaluations

import (
	"fmt"

	"github.com/revanite-io/sci/pkg/layer4"
)

{{ range .ControlFamilies }}
// 
// {{ .Name }} Control Family
{{ range .Controls }}
func {{ .ID | as_id }}() (evaluation *layer4.ControlEvaluation) {
	evaluation = &layer4.ControlEvaluation{
		Control_Id:        "{{ .ID }}",
		Remediation_Guide: "",
	}
	{{ range .Requirements }}
	evaluation.AddAssessment(
		"{{ .ID }}",
		"{{ .Text | as_text }}",
		[]string{ {{ range .Applicability }}
			"{{ . }}",
		{{- end }}
		},
		[]layer4.AssessmentStep{
			reusable_step_example,
		},
	)
	{{ end }}
	return
}
{{ end }}
{{ end }}
// TODO: This is only for reference, and should be deleted
type PayloadTypeExample struct {
	Organization struct {
		RequiresTwoFactorAuthentication bool `json:"requiresTwoFactorAuthentication"`
	} `json:"organization"`
}

// TODO: This is only for reference, and should be deleted
func reusable_step_example(payloadData interface{}, changes map[string]*layer4.Change) (result layer4.Result, message string) {
	payload, ok := payloadData.(*CustomDataObject)
	if !ok {
		return layer4.Unknown, fmt.Sprintf("Malformed assessment: expected payload type %T, got %T (%v)", &CustomDataObject{}, payloadData, payloadData)
	}
	if payload.yourData != "" {
		return layer4.Passed, fmt.Sprint("Your data ", payload.yourData)
	}
	return layer4.Unknown, "Not implemented"
}
